env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_ENVIRONMENT: public
  ARM_LOCATION: westus
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AWS_ACCESS_KEY_ID: ' ${{ secrets.AWS_ACCESS_KEY_ID }}'
  AWS_REGION: us-west-2
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CLOUDSDK_CORE_DISABLE_PROMPTS: 1
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  GOOGLE_REGION: us-central1
  GOOGLE_ZONE: us-central1-a
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
  PACKET_AUTH_TOKEN: ${{ secrets.PACKET_AUTH_TOKEN }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_API: https://api.pulumi-staging.io
  PULUMI_TEST_OWNER: moolumi
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
jobs:
  comment-notification:
    if: github.event_name == 'repository_dispatch'
    name: comment-notification
    runs-on: ubuntu-latest
    steps:
    - id: vars
      name: Create URL to the run output
      run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
    - name: Update with Result
      uses: peter-evans/create-or-update-comment@v1
      with:
        body: |-
          Please view the results of the PR Build [Here][1]

          [1]: ${{ steps.vars.outputs.run-url }}
        issue-number: ${{ github.event.client_payload.github.payload.issue.number
          }}
        repository: ${{ github.event.client_payload.github.payload.repository.full_name
          }}
        token: ${{ secrets.GITHUB_TOKEN }}
  dotnet-unit-testing:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: Running ${{ matrix.source-dir }} test
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install DotNet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{matrix.dotnet-version}}
    - name: Install Latest Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - uses: actions/checkout@v2
    - run: dotnet test
      working-directory: ${{ matrix.source-dir }}
    strategy:
      fail-fast: false
      matrix:
        dotnet-version:
        - 3.1.x
        platform:
        - ubuntu-latest
        source-dir:
        - testing-unit-cs
        - testing-unit-cs-mocks
        - testing-unit-fs-mocks
  go-unit-testing:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: Running ${{ matrix.source-dir }} test
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go ${{ matrix.go-version }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{matrix.go-version}}
    - name: Install Latest Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - uses: actions/checkout@v2
    - run: go test
      working-directory: ${{ matrix.source-dir }}
    strategy:
      fail-fast: false
      matrix:
        go-version:
        - 1.16.x
        platform:
        - ubuntu-latest
        source-dir:
        - testing-unit-go
  kubernetes:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: kubernetes
    needs: test-infra-setup
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install DotNet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{matrix.dotnet-version}}
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{matrix.node-version}}
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
    - name: Install Go ${{ matrix.go-version }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{matrix.go-version}}
    - name: Install Python Deps
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    - name: Install aws-iam-authenticator
      run: |-
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin
    - name: Install Kubectl
      run: |-
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv kubectl /usr/local/bin
    - name: Install + Configure Helm
      run: |-
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm repo add bitnami https://charts.bitnami.com/bitnami
    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ env.GOOGLE_PROJECT }}
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        version: 285.0.0
    - name: Login to Google Cloud Registry
      run: gcloud --quiet auth configure-docker
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 3600
        role-session-name: examples@githubActions
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    - uses: actions/checkout@v2
    - name: Checkout Scripts Repo
      uses: actions/checkout@v2
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Install Latest Stable Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - name: Set up gotestfmt
      uses: haveyoudebuggedit/gotestfmt-action@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Go Dependencies
      run: make ensure
    - name: Setup Config
      run: |-
        mkdir -p "$HOME/.kube/"
        pulumi stack -s "${{ env.PULUMI_TEST_OWNER }}/${{ github.sha }}-${{ github.run_number }}" -C misc/scripts/testinfra/ output --show-secrets kubeconfig >~/.kube/config
    - name: Run Kubernetes Tests
      run: |
        set -euo pipefail
        cd misc/test && go test . --timeout 4h -v -json -count=1 -short -parallel 40 --tags=all --run=TestAccKubernetes 2>&1 | tee /tmp/gotest.log | gotestfmt
    strategy:
      fail-fast: false
      matrix:
        dotnet-version:
        - 3.1.301
        go-version:
        - 1.16.x
        node-version:
        - 14.x
        platform:
        - ubuntu-latest
        python-version:
        - "3.7"
  linting:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: lint
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{matrix.node-version}}
    - name: Install Yarn
      run: curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${{ matrix.yarn-version
        }}
    - name: Update PATH for Yarn
      run: |-
        echo "$HOME/.yarn/bin" >> $GITHUB_PATH
        echo "$HOME/.config/yarn/global/node_modules/.bin" >> $GITHUB_PATH
    - name: Setup linting tool
      run: make install
    - name: Lint typescript files
      run: make lint
    strategy:
      fail-fast: false
      matrix:
        node-version:
        - 14.x
        platform:
        - ubuntu-latest
        yarn-version:
        - 1.13.0
  providers:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: run-provider-tests
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install DotNet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{matrix.dotnet-version}}
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{matrix.node-version}}
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
    - name: Install Go ${{ matrix.go-version }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{matrix.go-version}}
    - name: Install Python Deps
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    - name: Install aws-iam-authenticator
      run: |-
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin
    - name: Install Kubectl
      run: |-
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv kubectl /usr/local/bin
    - name: Install + Configure Helm
      run: |-
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm repo add bitnami https://charts.bitnami.com/bitnami
    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ env.GOOGLE_PROJECT }}
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        version: 285.0.0
    - name: Login to Google Cloud Registry
      run: gcloud --quiet auth configure-docker
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 3600
        role-session-name: examples@githubActions
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    - uses: actions/checkout@v2
    - name: Checkout Scripts Repo
      uses: actions/checkout@v2
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Install Latest Stable Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - name: Set up gotestfmt
      uses: haveyoudebuggedit/gotestfmt-action@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Testing Dependencies
      run: make ensure
    - name: Running ${{ matrix.clouds }}${{ matrix.languages }} Tests
      run: |
        set -euo pipefail
        cd misc/test && go test . --timeout 4h -v -json -count=1 -short -parallel 40 --tags=all --run=TestAcc${{ matrix.clouds }}${{ matrix.languages }} 2>&1 | tee /tmp/gotest.log | gotestfmt
    strategy:
      fail-fast: false
      matrix:
        clouds:
        - DigitalOcean
        - Aws
        - Azure
        - Gcp
        - EquinixMetal
        - Cloud
        dotnet-version:
        - 3.1.301
        go-version:
        - 1.16.x
        languages:
        - Cs
        - Go
        - Js
        - Ts
        - Py
        - Fs
        node-version:
        - 14.x
        platform:
        - ubuntu-latest
        python-version:
        - "3.7"
  python-unit-testing:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: Running ${{ matrix.source-dir }} test
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
    - name: Install Python Deps
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    - name: Install Latest Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - uses: actions/checkout@v2
    - run: |-
        python3 -m venv venv
        source venv/bin/activate
        pip3 install -r requirements.txt
        python -m unittest
      working-directory: ${{ matrix.source-dir }}
    strategy:
      fail-fast: false
      matrix:
        platform:
        - ubuntu-latest
        python-version:
        - 3.7.x
        source-dir:
        - testing-unit-py
  test-infra-destroy:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: test-infra-destroy
    needs: kubernetes
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install DotNet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{matrix.dotnet-version}}
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{matrix.node-version}}
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
    - name: Install Go ${{ matrix.go-version }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{matrix.go-version}}
    - name: Install Python Deps
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    - name: Install aws-iam-authenticator
      run: |-
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin
    - name: Install Kubectl
      run: |-
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv kubectl /usr/local/bin
    - name: Install + Configure Helm
      run: |-
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm repo add bitnami https://charts.bitnami.com/bitnami
    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ env.GOOGLE_PROJECT }}
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        version: 285.0.0
    - name: Login to Google Cloud Registry
      run: gcloud --quiet auth configure-docker
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 3600
        role-session-name: examples@githubActions
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    - uses: actions/checkout@v2
    - name: Checkout Scripts Repo
      uses: actions/checkout@v2
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Install Latest Stable Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - name: Destroy test infra
      run: make destroy_test_infra StackName="${{ env.PULUMI_TEST_OWNER }}/${{ github.sha
        }}-${{ github.run_number }}"
    strategy:
      fail-fast: false
      matrix:
        dotnet-version:
        - 3.1.301
        go-version:
        - 1.16.x
        node-version:
        - 14.x
        platform:
        - ubuntu-latest
        python-version:
        - "3.7"
  test-infra-setup:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: test-infra-setup
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install DotNet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{matrix.dotnet-version}}
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{matrix.node-version}}
    - name: Install Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
    - name: Install Go ${{ matrix.go-version }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{matrix.go-version}}
    - name: Install Python Deps
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    - name: Install aws-iam-authenticator
      run: |-
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin
    - name: Install Kubectl
      run: |-
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv kubectl /usr/local/bin
    - name: Install + Configure Helm
      run: |-
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm repo add bitnami https://charts.bitnami.com/bitnami
    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ env.GOOGLE_PROJECT }}
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        version: 285.0.0
    - name: Login to Google Cloud Registry
      run: gcloud --quiet auth configure-docker
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 3600
        role-session-name: examples@githubActions
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    - uses: actions/checkout@v2
    - name: Checkout Scripts Repo
      uses: actions/checkout@v2
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Install Latest Stable Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - name: Create Test Infrastructure
      run: make setup_test_infra StackName="${{ env.PULUMI_TEST_OWNER }}/${{ github.sha
        }}-${{ github.run_number }}"
    strategy:
      fail-fast: false
      matrix:
        dotnet-version:
        - 3.1.301
        go-version:
        - 1.16.x
        node-version:
        - 14.x
        platform:
        - ubuntu-latest
        python-version:
        - "3.7"
  ts-unit-testing:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: Running ${{ matrix.source-dir }} test
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{matrix.node-version}}
    - name: Install Latest Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v1.0.1
    - run: echo "Currently Pulumi $(pulumi version) is installed"
    - uses: actions/checkout@v2
    - run: |-
        npm install
        $(npm bin)/mocha -r ts-node/register ec2tests.ts
      working-directory: ${{ matrix.source-dir }}/mocha
    - run: |-
        npm install
        $(npm bin)/mocha -r ts-node/register bucket_pair_test.ts
      working-directory: ${{ matrix.source-dir }}/mocha
    strategy:
      fail-fast: false
      matrix:
        node-version:
        - 14.x
        platform:
        - ubuntu-latest
        source-dir:
        - testing-unit-ts
  status-checks:
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name
      == github.repository
    name: Final Status Check
    needs:
      - dotnet-unit-testing
      - go-unit-testing
      - python-unit-testing
      - ts-unit-testing
      - kubernetes
      - linting
      - providers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo "Ready for merge"
name: Run Examples Tests From PR
"on":
  pull_request:
    branches:
    - master
  repository_dispatch:
    types:
    - run-example-tests-command
